{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAIaA,G,MAAO,SAAAC,GAAK,OACjB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,8BAAyBF,EAAMG,QAAQC,GAAvC,0BAAmEC,IAAI,YAC/E,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCFfC,G,MAAW,SAAAR,GACtB,OAAO,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLfO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAWF,MCkDDG,G,wDAlDb,aAAc,IAAD,8BACX,gBAaFH,aAAc,SAAAI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJH,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOlC,MAE4BC,KAAKN,MAA/Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYc,wBAElD,OACE,sBAAKhC,UAAU,MAAf,UAEA,gDACA,cAAC,EAAD,CACAW,YAAY,iBACZC,aAAce,KAAKf,eAGnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAlCRK,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5c59935b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props => (\r\n        <div className='card-container'>\r\n          <img src={`http://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n          <h2>{props.monster.name}</h2>  \r\n          <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n","import {Card } from '../card/card.component'\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\n\r\nexport const CardList = props => {\r\n  return <div className='card-list'>\r\n     {props.monsters.map(monster => (\r\n          <Card key={monster.id} monster={monster} /> \r\n    ))}  \r\n  </div>; \r\n};","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\n export const SearchBox = ({placeholder, handleChange}) => (\r\n     <input \r\n     className='search'\r\n     type='search'\r\n     placeholder={placeholder}\r\n     onChange ={handleChange}\r\n     />\r\n ) "," import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component'\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    };\n  }\n// getning data from API \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  \n  handleChange= e => { \n    this.setState({ searchField: e.target.value });\n  };\n\n  render(){\n    //make a good search field som interactive \n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n    return (\n      <div className=\"App\">\n      \n      <h1>MonstRS RoloEX</h1>\n      <SearchBox\n      placeholder='search monster'\n      handleChange={this.handleChange} \n      />\n\n      <CardList monsters={filteredMonsters} /> \n      \n      </div>\n\n  );\n  }\n  \n}\n\n \n /* <div className=\"App\">\n        <h1>{this.state.string}</h1>\n        <button onClick={() => this.setState({string: 'hiii YOOOO!!'})}> change the text</button>\n\n </div> */\n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}